#! /usr/bin/env python3
from Jumpscale import j

import click

@click.group()
def cli():
    pass

HELP="""

# sync tool to sync local code directories to remote zos container

## sync existing jumpscale dirs

do

```js_sync sync```

will sync following code dirs

```
["{DIR_CODE}/github/threefoldtech/jumpscaleX", "{DIR_CODE}/github/threefoldtech/digitalmeX"]
```

## 1 specific directory

can also sync one specific directory e.g.
   
```js_sync sync -p install/:/tmp/install/```

## you can use the jumpscale dir variables


e.g.  "{DIR_CODE}/github/threefoldtech/0-robot:{DIR_TEMP}/0-robot" 

would sync code dir to tmpdir/0-robot
 

the tool can deal with relative paths, the relative install subdir will be synced to /tmp/

## reload

if a new container was created, don't forget to call js_sync reload because caching is used inside js_sync

"""


@click.command()
@click.option('--name', '-n', default="main", help="name of the sshclient, if empty  will be main")
@click.option('--paths', '-p', default=None, help=HELP)
def sync(name="default",paths=None):
    cl = j.clients.ssh.get(name=name)
    j.shell()
    s = self.get(name="jssync_%s"%name,sshclient_name= cl.name,paths=paths)
    s.sync()

@click.command()
@click.option('--name', '-n', default="main", help="name of the sshclient, if empty  will be main")
@click.option('--addr', '-a', default="localhost", help="address of the node to connect to")
@click.option('--port', '-p', default=22, help="ssh port")
@click.option('--user', '-u', default="root", help="user")
@click.option('--passwd', '-p', default=None, help="passwd, if usage of ssh key then empty")
@click.option('--paths', '-p', default=None, help=HELP)
def configure(name="default", addr="localhost",port=22,user="root",passwd=None,paths=None):
    cl = j.clients.ssh.get(name=name, addr=addr, port=port,passwd=passwd)
    s = self.get(name="jssync_%s"%name,sshclient_name= cl.name,paths=paths)

@click.command()
def list():
    """
    will list all ssh clients, can use for name=...
    :return:
    """
    j.clients.ssh.find()
    j.shell()


@click.command()
def help():
    print(HELP)

cli.add_command(sync)
cli.add_command(configure)
cli.add_command(help)
cli.add_command(list)

if __name__ == '__main__':
    cli()


